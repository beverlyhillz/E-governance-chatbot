# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NJz5JKn4BIDxIPYQkIkYa6qGUiMtNdu
"""
import string
import nltk
import pickle
import re
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

nltk.download('stopwords')
from nltk.corpus import stopwords

# Paths for all resources for the bot.
RESOURCE_PATH = {
    'INTENT_RECOGNIZER': 'intent_recognizer.pkl',
    'CATEGORY_CLASSIFIER': 'category_classifier.pkl',
    'SCHEME_CLASSIFIER': 'scheme_classifier.pkl',
    'TFIDF_VECTORIZER': 'tfidf_vectorizer.pkl',
    'CATEGORY_EMBEDDINGS_FOLDER': 'category_embeddings_by_tags',
    'SCHEME_EMBEDDINGS_FOLDER': 'scheme_embeddings_by_tags',
    'WORD_EMBEDDINGS': 'data/word_embeddings.tsv',
}


def text_prepare(text):
    """Performs tokenization and simple preprocessing."""
    
    replace_by_space_re = re.compile('[/(){}\[\]\|@,;]')
    bad_symbols_re = re.compile('[^0-9a-z #+_]')
    stopwords_set = set(stopwords.words('english'))

    text = text.lower()
    text = replace_by_space_re.sub(' ', text)
    text = bad_symbols_re.sub('', text)
    text = ' '.join([x for x in text.split() if x and x not in stopwords_set])
    return text.strip()


def load_embeddings(embeddings_path):
    """Loads pre-trained word embeddings from tsv file.

    Args:
      embeddings_path - path to the embeddings file.

    Returns:
      embeddings - dict mapping words to vectors;
      embeddings_dim - dimension of the vectors.
    """
    
    # Hint: you have already implemented a similar routine in the 3rd assignment.
    # Note that here you also need to know the dimension of the loaded embeddings.
    # When you load the embeddings, use numpy.float32 type as dtype

    ########################
    #### YOUR CODE HERE ####
    ########################
    starspace_embeddings = {}
    starspace_embeddings_len = []
    for line in open(embeddings_path):
        a = line.strip().split('\t')
        starspace_embeddings_len.append(len(a)-1)
        starspace_embeddings[a[0]]=[float(a[x]) for x in range (1,len(a))]
        
    return starspace_embeddings,starspace_embeddings_len[0]

    


def question_to_vec(question, embeddings, dim):
    """Transforms a string to an embedding by averaging word embeddings."""
    
    # Hint: you have already implemented exactly this function in the 3rd assignment.

    ########################
    #### YOUR CODE HERE ####
    ########################

    arr=question.split()
    vec = np.zeros(dim)
    i=0
    for word in arr:
        if word in embeddings:
            vec+=embeddings[word]
            i+=1
       
    if i!=0:
        return vec/i
    else:
        return vec


def unpickle_file(filename):
    """Returns the result of unpickling the file content."""
    with open(filename, 'rb') as f:
        return pickle.load(f)
def wrd2vec(k):
    s=np.zeros(26)
    chemd=charemb()
    for i in k:
        s=s+chemd[i]
    s=s/len(k)
    s=s.reshape(1,-1)
    return s
def charemb():
    st=string.ascii_lowercase
    chemd={}
    for i in st:
        chemd[i]=[int(j==i) for j in st]
    return chemd